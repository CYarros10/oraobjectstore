{
    "contents" : "\n#' Authenticates against an Oracle Object Store\n#'\n#' @param id identify domain to be connected to,\n#' @param username Oracle Object Store username\n#' @param password Oracle Object Store pawword for username\n#' @return returns a list with 5 elements.  This object should be passed to other functions.\n#' auth_token which contains the authorization token needed for other commands\n#' url - the full url command used for curl commands\n#' user_id - the well formed user id of the form storage domain:user\n#' identity_domain - Identity domain used to authenticate\n#' auth_url - url in the form used for authentication\n#' @import httr\n#' @examples\n#' #my_credentials <- oos_authenticate(\"a9999999\",\"brian@oracle.com\",\"1234\")\n#' @export\n\noos_authenticate <- function(id,username,password) {\n#  library(httr)\n  #Build required urls and user id\n  storage_name <- paste(\"Storage-\",id,sep=\"\")\n\n  #storage cloud authentication URL of the form \"https://identitydomain.storage.cloud.com\"  replace identitydomain with your identty domain i.e.  a433433\n  # do not uinclude /auth/v1.0 do not include forward slash\n  url <-   paste(\"https://\",id,\".storage.oraclecloud.com\",sep=\"\")\n  user_id <- paste(storage_name,\":\",username,sep=\"\")\n  auth_url <- paste(url,\"/auth/v1.0\",sep=\"\")\n  fetch_url <- paste(url,\"/v1/\",storage_name,sep=\"\")\n\n  #Get authentication token\n  auth_string <- httr::GET(url = auth_url, add_headers(\"X-Storage-User\" = user_id, \"X-Storage-Pass\" = password)   , verbose())\n  list(auth_token=auth_string$headers$`x-auth-token`,url=fetch_url,user_id=user_id,identity_domain=id,auth_url=auth_url)\n}\n\n#' Downloads a file as a stream from the Oracle Object store.  Used to load files into a dataframe\n#'\n#' @param credentials List Object returned from a call to oos_autheticate\n#' @param container Full container name where a file resides.\n#' @param file_name The file name to download\n#' @return returns the contents of the file as a result of a read.csv.  ONly tested with csvs.\n#'\n#' @examples\n#' #my_data <- oos_get_file(my_credentials,\"sales\" ,\"data.csv\")\n#' #my_data2 <- oos_get_file(my_credentials,\"sales/2004\" ,\"data.csv\")\n#' @export\n#'\noos_get_file <- function(credentials,container,file_name) {\n  fetch_url <- paste(credentials$url,\"/\",container,\"/\",file_name,sep=\"\")\n  remote_file <- content(httr::GET(url = fetch_url, add_headers ( \"X-Auth-Token\" = credentials$auth_token)), as=\"text\")\n  data <- read.csv(file = textConnection(remote_file))\n  data\n}\n\n#' Lists the contents of a container and all sub containers.\n#'\n#' @param credentials List Object returned from a call to oos_autheticate\n#' @param container Full container name to show contents.\n#' @return reurns a dataframe which contains the container path and file name, the size in bytes of the file and when it was last modified.\n#' @examples\n#' #oos_ls(my_credentials,\"sales\" )\n#' #oos_ls(my_credentials,\"sales/2004\" )\n#' @export\n#'\noos_ls <- function(credentials,container) {\n  fetch_url <- paste(credentials$url,\"/\",container,sep=\"\")\n  remote_file <- content(httr::GET(url = fetch_url, add_headers ( \"X-Auth-Token\" = credentials$auth_token)), as=\"parsed\")\n  remote_file <- lapply(remote_file,'[',c('name','bytes','last_modified'))\n  remote_file <- do.call(rbind.data.frame, remote_file)\n  remote_file\n}\n\n#' Creates a new container in the Oracle object Store\n#'\n#' @param credentials List Object returned from a call to oos_autheticate\n#' @param container Full container name to be added.  If container is part of another container, include the full path.\n#' @return returns any errors.  NULL means success.\n#' @examples\n#' #oos_mkdir(my_credentials,'sales' )\n#' @export\noos_mkdir <- function(credentials,container) {\n  fetch_url <- paste(credentials$url,\"/\",container,sep=\"\")\n  create_response <- content(httr::PUT(url = fetch_url, add_headers ( \"X-Auth-Token\" = credentials$auth_token)), as=\"parsed\")\n  create_response\n}\n\n#' Uploads a single file to the object store\n#'\n#' @param credentials List Object returned from a call to oos_autheticate\n#' @param container Full container name where the file should be uploaded.\n#' @param directory Local filesystem directory where the file resides\n#' @param file_name the name of the file to be uploaded.\n#' @return returns any errors.  NULL means success.\n#' @examples\n#' #oos_upload_file(my_credentials,\"sales\",\"c://data/sales\",\"sales.csv\" )\n#' @export\noos_upload_file <- function(credentials,container,directory,file_name) {\n  temp_wd <- getwd()\n  setwd(directory)\n  fetch_url <- paste(credentials$url,\"/\",container,\"/\",file_name,sep=\"\")\n  create_response <- content(httr::PUT(url = fetch_url, add_headers ( \"X-Auth-Token\" = credentials$auth_token )))\n  setwd(temp_wd)\n  create_response\n}\n# copy a file from one container to another\n\n# move a file from one container to another\n\n#' removes a file from the Oracle Object Store.\n#'\n#' @param credentials List Object returned from a call to oos_autheticate\n#' @param container Full container name where the file resides.\n#' @param file_name the name of the file to be removed\n#' @return returns any errors.  NULL means success.\n#' @examples\n#' #oos_rm(my_credentials,\"sales\",\"sales.csv\" )\n#' @export\noos_rm <- function(credentials,container,file_name) {\n  fetch_url <- paste(credentials$url,\"/\",container,\"/\",file_name,sep=\"\")\n  create_response <- content(httr::DELETE(url = fetch_url, add_headers ( \"X-Auth-Token\" = credentials$auth_token )))\n  create_response\n}\n\n",
    "created" : 1491335807347.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3931421127",
    "id" : "4BE969AA",
    "lastKnownWriteTime" : 1491408713,
    "path" : "E:/R_code/oraobjectstore/R/oosbase.R",
    "project_path" : "R/oosbase.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}